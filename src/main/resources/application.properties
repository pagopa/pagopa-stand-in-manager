# Info
info.application.artifactId=@project.artifactId@
info.application.name=@project.name@
info.application.version=@project.version@
info.application.description=@project.description@
info.properties.environment=${ENV:azure}
# Actuator
management.endpoints.web.exposure.include=health,info
management.endpoints.jmx.exposure.include=health,info
management.info.env.enabled=true
management.endpoint.health.probes.enabled=true
management.health.livenessState.enabled=true
management.health.readinessState.enabled=true
# Openapi
springdoc.writer-with-order-by-keys=true
springdoc.writer-with-default-pretty-printer=true
# Server
server.servlet.context-path=/
server.port=8080
timezone=${TIMEZONE:Europe/Rome}
# Logging
logging.level.root=${DEFAULT_LOGGING_LEVEL:INFO}
logging.level.it.gov.pagopa=${APP_LOGGING_LEVEL:INFO}
# CORS configuration
cors.configuration=${CORS_CONFIGURATION:'{"origins": ["*"], "methods": ["*"]}'}
# Database settings
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
api-config-cache.base-path=${API_CONFIG_CACHE_BASE_PATH}
api-config-cache.api-key=${API_CONFIG_CACHE_API_KEY}
dataexplorer.url=${DATAEXPLORER_URL}
dataexplorer.clientId=
dataexplorer.appKey=
dataexplorer.dbName=re
cosmos.endpoint=${COSMOS_ENDPOINT}
cosmos.key=${COSMOS_KEY}
cosmos.db.name=standin
forwarder.url=${FORWARDER_URL}
forwarder.key=${FORWARDER_KEY}
# station goes into stand-in
# minutes to group verify/activate requests
adder.slot.minutes=${ADDER_SLOT_MINUTES}
# if ko requests is greater than the threshold
adder.slot.fault.threshold=${ADDER_SLOT_FAULT_THRESHOLD}
# interval range to monitor
adder.range.minutes=${ADDER_RANGE_MINUTES}
# if ko is greater than the threshold then station goes in stand-in mode
adder.range.fault.threshold=${ADDER_RANGE_FAULT_THRESHOLD}
# station leaves into stand-in
remover.range.minutes=${REMOVER_SLOT_MINUTES}
# if ko is lesser than the threshold then station leaves in stand-in mode
remover.range.fault.limit=${REMOVER_SLOT_FAULT_LIMIT}
# excluded stations from monitor
excludedStations=${EXCLUDED_STATIONS}
aws.region=${AWS_REGION}
aws.ses.user=${AWS_SES_USER}
aws.mailto=${AWS_MAILTO}
config.refresh.cron=${CONFIG_REFRESH_CRON}
nodo.monitor.cron=${NODO_MONITOR_CRON}
nodo.calc.cron=${NODO_CALC_CRON}
station.monitor.cron=${STATION_MONITOR_CRON}
station.calc.cron=${STATION_CALC_CRON}
#EventHub
nodo-dei-pagamenti-stand-in-tx-connection-string=${STAND_IN_TX_CONNECTION_STRING}
nodo-dei-pagamenti-stand-in-tx-name=${STAND_IN_TX_NAME:nodo-dei-pagamenti-stand-in}
saveDB=false
sendEvent=true
forwarder.connectionTimeout=10
forwarder.readTimeout=10